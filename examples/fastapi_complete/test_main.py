"""Comprehensive test suite for the FastAPI application.

Generated by Atlas Coder - Advanced Testing Demo
"""

import pytest
import asyncio
from fastapi.testclient import TestClient
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from sqlalchemy.pool import StaticPool

# Import our app and dependencies
import sys
from pathlib import Path
sys.path.append(str(Path(__file__).parent))

from main import app, get_db, Base, User, Task

# Test database setup with proper isolation
SQLALCHEMY_DATABASE_URL = "sqlite:///:memory:"  # In-memory database for isolation
engine = create_engine(
    SQLALCHEMY_DATABASE_URL,
    connect_args={"check_same_thread": False},
    poolclass=StaticPool,
)
TestingSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)


def override_get_db():
    """Override database dependency for testing with proper cleanup."""
    try:
        db = TestingSessionLocal()
        yield db
    finally:
        db.close()


app.dependency_overrides[get_db] = override_get_db


@pytest.fixture(autouse=True)
def setup_database():
    """Setup and teardown database for each test."""
    # Create all tables
    Base.metadata.create_all(bind=engine)
    yield
    # Drop all tables after each test
    Base.metadata.drop_all(bind=engine)


client = TestClient(app)


@pytest.fixture
def test_user_data():
    """Test user data."""
    return {
        "email": "test@example.com",
        "username": "testuser",
        "password": "testpassword123"
    }


@pytest.fixture
def authenticated_user(test_user_data):
    """Create and authenticate a test user."""
    # Register user
    response = client.post("/auth/register", json=test_user_data)
    assert response.status_code == 201
    
    # Login to get token
    login_data = {
        "username": test_user_data["username"],
        "password": test_user_data["password"]
    }
    response = client.post("/auth/login", json=login_data)
    assert response.status_code == 200
    token = response.json()["access_token"]
    
    return {
        "token": token,
        "headers": {"Authorization": f"Bearer {token}"},
        "user_data": test_user_data
    }


class TestAuthentication:
    """Test authentication endpoints."""
    
    def test_register_user_success(self, test_user_data):
        """Test successful user registration."""
        response = client.post("/auth/register", json=test_user_data)
        
        assert response.status_code == 201
        data = response.json()
        assert data["email"] == test_user_data["email"]
        assert data["username"] == test_user_data["username"]
        assert "id" in data
        assert data["is_active"] is True
    
    def test_register_duplicate_email(self, test_user_data):
        """Test registration with duplicate email."""
        # Register first user
        client.post("/auth/register", json=test_user_data)
        
        # Try to register with same email, different username
        duplicate_data = test_user_data.copy()
        duplicate_data["username"] = "different_username"
        
        response = client.post("/auth/register", json=duplicate_data)
        assert response.status_code == 400
        assert "Email already registered" in response.json()["detail"]
    
    def test_register_duplicate_username(self, test_user_data):
        """Test registration with duplicate username."""
        # Register first user
        client.post("/auth/register", json=test_user_data)
        
        # Try to register with same username, different email
        duplicate_data = test_user_data.copy()
        duplicate_data["email"] = "different@example.com"
        
        response = client.post("/auth/register", json=duplicate_data)
        assert response.status_code == 400
        assert "Username already taken" in response.json()["detail"]
    
    def test_login_success(self, test_user_data):
        """Test successful login."""
        # Register user first
        client.post("/auth/register", json=test_user_data)
        
        # Login
        login_data = {
            "username": test_user_data["username"],
            "password": test_user_data["password"]
        }
        response = client.post("/auth/login", json=login_data)
        
        assert response.status_code == 200
        data = response.json()
        assert "access_token" in data
        assert data["token_type"] == "bearer"
    
    def test_login_invalid_credentials(self, test_user_data):
        """Test login with invalid credentials."""
        # Register user first
        client.post("/auth/register", json=test_user_data)
        
        # Try login with wrong password
        login_data = {
            "username": test_user_data["username"],
            "password": "wrongpassword"
        }
        response = client.post("/auth/login", json=login_data)
        
        assert response.status_code == 401
        assert "Incorrect username or password" in response.json()["detail"]
    
    def test_get_current_user(self, authenticated_user):
        """Test getting current user information."""
        response = client.get("/auth/me", headers=authenticated_user["headers"])
        
        assert response.status_code == 200
        data = response.json()
        assert data["email"] == authenticated_user["user_data"]["email"]
        assert data["username"] == authenticated_user["user_data"]["username"]
    
    def test_get_current_user_unauthorized(self):
        """Test getting current user without authentication."""
        response = client.get("/auth/me")
        assert response.status_code == 403  # No Authorization header
    
    def test_get_current_user_invalid_token(self):
        """Test getting current user with invalid token."""
        headers = {"Authorization": "Bearer invalid_token"}
        response = client.get("/auth/me", headers=headers)
        assert response.status_code == 401


class TestTasks:
    """Test task management endpoints."""
    
    def test_create_task(self, authenticated_user):
        """Test creating a new task."""
        task_data = {
            "title": "Test Task",
            "description": "This is a test task"
        }
        
        response = client.post(
            "/tasks",
            json=task_data,
            headers=authenticated_user["headers"]
        )
        
        assert response.status_code == 201
        data = response.json()
        assert data["title"] == task_data["title"]
        assert data["description"] == task_data["description"]
        assert data["completed"] is False
        assert "id" in data
    
    def test_create_task_unauthorized(self):
        """Test creating task without authentication."""
        task_data = {"title": "Test Task"}
        response = client.post("/tasks", json=task_data)
        assert response.status_code == 403
    
    def test_get_user_tasks(self, authenticated_user):
        """Test getting user's tasks."""
        # Create some tasks first
        tasks = [
            {"title": "Task 1", "description": "First task"},
            {"title": "Task 2", "description": "Second task"}
        ]
        
        for task in tasks:
            client.post("/tasks", json=task, headers=authenticated_user["headers"])
        
        # Get tasks
        response = client.get("/tasks", headers=authenticated_user["headers"])
        
        assert response.status_code == 200
        data = response.json()
        assert len(data) == 2
        assert data[0]["title"] == "Task 1"
        assert data[1]["title"] == "Task 2"
    
    def test_get_user_tasks_with_filters(self, authenticated_user):
        """Test getting tasks with completion filter."""
        # Create completed and uncompleted tasks
        client.post(
            "/tasks",
            json={"title": "Completed Task"},
            headers=authenticated_user["headers"]
        )
        
        # Create task and mark as completed
        response = client.post(
            "/tasks",
            json={"title": "Uncompleted Task"},
            headers=authenticated_user["headers"]
        )
        task_id = response.json()["id"]
        
        client.put(
            f"/tasks/{task_id}",
            json={"completed": True},
            headers=authenticated_user["headers"]
        )
        
        # Get only completed tasks
        response = client.get(
            "/tasks?completed=true",
            headers=authenticated_user["headers"]
        )
        
        assert response.status_code == 200
        data = response.json()
        assert len(data) == 1
        assert data[0]["completed"] is True
    
    def test_get_specific_task(self, authenticated_user):
        """Test getting a specific task by ID."""
        # Create task
        task_data = {"title": "Specific Task", "description": "Test description"}
        response = client.post(
            "/tasks",
            json=task_data,
            headers=authenticated_user["headers"]
        )
        task_id = response.json()["id"]
        
        # Get specific task
        response = client.get(
            f"/tasks/{task_id}",
            headers=authenticated_user["headers"]
        )
        
        assert response.status_code == 200
        data = response.json()
        assert data["title"] == task_data["title"]
        assert data["id"] == task_id
    
    def test_get_nonexistent_task(self, authenticated_user):
        """Test getting a task that doesn't exist."""
        response = client.get("/tasks/999999", headers=authenticated_user["headers"])
        assert response.status_code == 404
        assert "Task not found" in response.json()["detail"]
    
    def test_update_task(self, authenticated_user):
        """Test updating a task."""
        # Create task
        response = client.post(
            "/tasks",
            json={"title": "Original Title"},
            headers=authenticated_user["headers"]
        )
        task_id = response.json()["id"]
        
        # Update task
        update_data = {
            "title": "Updated Title",
            "description": "Updated description",
            "completed": True
        }
        
        response = client.put(
            f"/tasks/{task_id}",
            json=update_data,
            headers=authenticated_user["headers"]
        )
        
        assert response.status_code == 200
        data = response.json()
        assert data["title"] == update_data["title"]
        assert data["description"] == update_data["description"]
        assert data["completed"] == update_data["completed"]
    
    def test_update_nonexistent_task(self, authenticated_user):
        """Test updating a task that doesn't exist."""
        response = client.put(
            "/tasks/999999",
            json={"title": "Updated"},
            headers=authenticated_user["headers"]
        )
        assert response.status_code == 404
    
    def test_delete_task(self, authenticated_user):
        """Test deleting a task."""
        # Create task
        response = client.post(
            "/tasks",
            json={"title": "Task to Delete"},
            headers=authenticated_user["headers"]
        )
        task_id = response.json()["id"]
        
        # Delete task
        response = client.delete(
            f"/tasks/{task_id}",
            headers=authenticated_user["headers"]
        )
        
        assert response.status_code == 204
        
        # Verify task is deleted
        response = client.get(
            f"/tasks/{task_id}",
            headers=authenticated_user["headers"]
        )
        assert response.status_code == 404
    
    def test_delete_nonexistent_task(self, authenticated_user):
        """Test deleting a task that doesn't exist."""
        response = client.delete("/tasks/999999", headers=authenticated_user["headers"])
        assert response.status_code == 404


class TestHealthCheck:
    """Test health check endpoint."""
    
    def test_health_check(self):
        """Test health check endpoint."""
        response = client.get("/health")
        
        assert response.status_code == 200
        data = response.json()
        assert data["status"] == "healthy"
        assert "timestamp" in data
        assert data["version"] == "1.0.0"


class TestEdgeCases:
    """Test edge cases and error conditions."""
    
    def test_invalid_json_request(self):
        """Test request with invalid JSON."""
        response = client.post(
            "/auth/register",
            data="invalid json",
            headers={"Content-Type": "application/json"}
        )
        assert response.status_code == 422
    
    def test_missing_required_fields(self):
        """Test request with missing required fields."""
        response = client.post("/auth/register", json={"email": "test@example.com"})
        assert response.status_code == 422
    
    def test_invalid_email_format(self):
        """Test registration with invalid email format."""
        invalid_data = {
            "email": "invalid-email",
            "username": "testuser",
            "password": "password"
        }
        response = client.post("/auth/register", json=invalid_data)
        assert response.status_code == 422
    
    def test_empty_task_title(self, authenticated_user):
        """Test creating task with empty title."""
        response = client.post(
            "/tasks",
            json={"title": "", "description": "Description"},
            headers=authenticated_user["headers"]
        )
        # Should allow empty title based on current validation
        assert response.status_code == 201
    
    def test_very_long_task_title(self, authenticated_user):
        """Test creating task with very long title."""
        long_title = "A" * 1000  # Very long title
        
        response = client.post(
            "/tasks",
            json={"title": long_title},
            headers=authenticated_user["headers"]
        )
        assert response.status_code == 201
        data = response.json()
        assert data["title"] == long_title


if __name__ == "__main__":
    pytest.main([__file__, "-v"])